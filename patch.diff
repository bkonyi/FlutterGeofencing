From 78fff7b36b2882369ff3566357f72e6856b0b423 Mon Sep 17 00:00:00 2001
From: Usama <usama@cowlar.com>
Date: Fri, 15 May 2020 13:05:00 +0500
Subject: [PATCH] Safety checks added, if lateinit variables initialized before
 accessing them

---
 .../plugins/geofencing/GeofencingService.kt   | 39 ++++++++++++-------
 1 file changed, 24 insertions(+), 15 deletions(-)

diff --git a/android/src/main/kotlin/io/flutter/plugins/geofencing/GeofencingService.kt b/android/src/main/kotlin/io/flutter/plugins/geofencing/GeofencingService.kt
index 150cdb8..de48bab 100644
--- a/android/src/main/kotlin/io/flutter/plugins/geofencing/GeofencingService.kt
+++ b/android/src/main/kotlin/io/flutter/plugins/geofencing/GeofencingService.kt
@@ -28,6 +28,7 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
     private val queue = ArrayDeque<List<Any>>()
     private lateinit var mBackgroundChannel: MethodChannel
     private lateinit var mContext: Context
+    private lateinit var sPluginRegistrantCallback: PluginRegistrantCallback
 
     companion object {
         @JvmStatic
@@ -39,20 +40,14 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
         @JvmStatic
         private val sServiceStarted = AtomicBoolean(false)
 
-        @JvmStatic
-        private lateinit var sPluginRegistrantCallback: PluginRegistrantCallback
-
         @JvmStatic
         fun enqueueWork(context: Context, work: Intent) {
             enqueueWork(context, GeofencingService::class.java, JOB_ID, work)
         }
-
-        @JvmStatic
-        fun setPluginRegistrant(callback: PluginRegistrantCallback) {
-            sPluginRegistrantCallback = callback
-        }
     }
-
+    private fun setPluginRegistrant(callback: PluginRegistrantCallback) {
+        sPluginRegistrantCallback = callback
+    }
     private fun startGeofencingService(context: Context) {
         synchronized(sServiceStarted) {
             mContext = context
@@ -71,7 +66,9 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
                 sBackgroundFlutterView = FlutterNativeView(context, true)
 
                 val registry = sBackgroundFlutterView!!.pluginRegistry
-                sPluginRegistrantCallback.registerWith(registry)
+                if (::sPluginRegistrantCallback.isInitialized) {
+                    sPluginRegistrantCallback.registerWith(registry)
+                }
                 val args = FlutterRunArguments()
                 args.bundlePath = FlutterMain.findAppBundlePath(context)
                 args.entrypoint = callbackInfo.callbackName
@@ -83,7 +80,9 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
         }
         mBackgroundChannel = MethodChannel(sBackgroundFlutterView,
                 "plugins.flutter.io/geofencing_plugin_background")
-        mBackgroundChannel.setMethodCallHandler(this)
+        if (::mBackgroundChannel.isInitialized) {
+            mBackgroundChannel.setMethodCallHandler(this)
+        }
     }
 
    override fun onMethodCall(call: MethodCall, result: Result) {
@@ -91,18 +90,24 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
             "GeofencingService.initialized" -> {
                 synchronized(sServiceStarted) {
                     while (!queue.isEmpty()) {
-                        mBackgroundChannel.invokeMethod("", queue.remove())
+                        if (::mBackgroundChannel.isInitialized) {
+                            mBackgroundChannel.invokeMethod("", queue.remove())
+                        }
                     }
                     sServiceStarted.set(true)
                 }
             }
             "GeofencingService.promoteToForeground" -> {
-                mContext.startForegroundService(Intent(mContext, IsolateHolderService::class.java))
+                if (::mContext.isInitialized) {
+                    mContext.startForegroundService(Intent(mContext, IsolateHolderService::class.java))
+                }
             }
             "GeofencingService.demoteToBackground" -> {
                 val intent = Intent(mContext, IsolateHolderService::class.java)
                 intent.setAction(IsolateHolderService.ACTION_SHUTDOWN)
-                mContext.startForegroundService(intent)
+                if (::mContext.isInitialized) {
+                    mContext.startForegroundService(intent)
+                }
             }
             else -> result.notImplemented()
         }
@@ -145,7 +150,11 @@ class GeofencingService : MethodCallHandler, JobIntentService() {
                 queue.add(geofenceUpdateList)
             } else {
                 // Callback method name is intentionally left blank.
-                Handler(mContext.mainLooper).post { mBackgroundChannel.invokeMethod("", geofenceUpdateList) }
+                Handler(mContext.mainLooper).post {
+                    if (::mBackgroundChannel.isInitialized) {
+                        mBackgroundChannel.invokeMethod("", geofenceUpdateList)
+                    }
+                }
             }
         }
     }
-- 
2.20.1

